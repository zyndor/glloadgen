<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://docbook.org/xml/5.0/rng/docbookxi.rng" type="xml"?>
<?oxygen SCHSchema="http://docbook.org/xml/5.0/rng/docbookxi.rng"?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
    <title>Style No Load</title>
    <para>The <literal>noload_cpp</literal> style works a lot like the near-defunct GLee loader. You
        don't need to call a function to load all of the function pointers; instead, you simply call
        the GL functions as normal. If it hasn't been loaded, it will be. This makes it among the
        most user-friendly of the loader styles.</para>
    <para>As a C++ style, it follows the naming conventions of the <link><literal
                xlink:href="Style_Pointer_CPP">pointer_cpp</literal></link> style. Everything is
        scoped into namespaces. The enumerators don't have the <literal>GL_</literal> prefix on
        them, and so forth.</para>
    <para>The system is designed to be automatic, responding to your application's needs. However,
        calling a function that the implementation does not provide will result in a crash, just as
        it would for the previous system.</para>
    <para>To help alleviate this, the system does have variables to tell you which extensions are
        available (at least, according to the extension strings). They are located in the
            <literal>exts</literal> namespace, using the <literal>var_&lt;extension name></literal>
        syntax, and they are C++ <literal>bool</literal> types. However, unlike the magic function
        pointers, you have to actually initialize them. You can call
            <literal>sys::CheckExtensions</literal> to initialize them. This function only
        initializes the extension variables, so it cannot report on the number of functions that
        failed to load.</para>
</article>
